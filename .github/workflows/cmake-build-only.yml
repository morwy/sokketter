name: CMake (compile and test)

on:
  push:
    branches: [ "main", "*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-only:
    runs-on: ${{ matrix.os }}
    env:
      path-separator: ${{ (startsWith(matrix.os, 'windows') && '\') || '/' }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-13, macos-14]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        library_type: [static]
        include:
          - os: windows-2019
            c_compiler: cl
            cpp_compiler: cl
          - os: macos-13
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-14
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-20.04
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-2019
            c_compiler: gcc
          - os: windows-2019
            c_compiler: clang
          - os: macos-13
            c_compiler: cl
          - os: macos-13
            c_compiler: gcc
          - os: macos-14
            c_compiler: cl
          - os: macos-14
            c_compiler: gcc
          - os: ubuntu-20.04
            c_compiler: cl
          - os: ubuntu-20.04
            c_compiler: clang

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}${{ env.path-separator }}build" >> "$GITHUB_OUTPUT"
        echo "binary-output-dir=${{ github.workspace }}${{ env.path-separator }}bin${{ env.path-separator }}${{ (startsWith(matrix.os, 'ubuntu') && 'linux') || (startsWith(matrix.os, 'windows') && 'windows') || (startsWith(matrix.os, 'macos') && 'macos') || '' }}_${{ (startsWith(matrix.os, 'macos-14') && 'arm64') || 'x86_64' }}${{ env.path-separator }}${{ matrix.build_type }}" >> "$GITHUB_OUTPUT"

    - name: Install dependencies (Ubuntu only)
      run: |
        sudo apt update
        sudo apt install gcc lcov libudev-dev ninja-build -y
      if: ${{ startsWith(matrix.os, 'ubuntu') }}

    - name: Install dependencies (MacOS only)
      run: |
        brew install lcov
      if: ${{ startsWith(matrix.os, 'macos') }}

    - name: Configure CMake for static libraries
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DIS_COMPILING_STATIC=true -DIS_COMPILING_SHARED=false -DENABLE_TESTING=true
      if: matrix.library_type == 'static'

    - name: Configure CMake for shared libraries
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DIS_COMPILING_STATIC=false -DIS_COMPILING_SHARED=true -DENABLE_TESTING=true
      if: matrix.library_type == 'shared'

    - name: Build binaries
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      # This action has bug with wildcards under Windows OS, thus ignore it.
    - name: Check binaries (non-Windows)
      uses: andstor/file-existence-action@v3
      if: ${{ !startsWith(matrix.os, 'windows') }}
      with:
        files: "${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}includes${{ env.path-separator }}*, ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}libs${{ env.path-separator }}*"
        ignore_case: true
        fail: true

    - name: Run tests
      run: |
        ctest --output-on-failure --test-dir ${{ steps.strings.outputs.build-output-dir }}
