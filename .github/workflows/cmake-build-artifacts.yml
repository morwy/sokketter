name: CMake (build artifacts)

on: workflow_dispatch

jobs:
  build-only:
    runs-on: ${{ matrix.os }}
    env:
      path-separator: ${{ (startsWith(matrix.os, 'windows') && '\') || '/' }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-13, macos-14]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        library_type: [static]
        include:
          - os: windows-2019
            c_compiler: cl
            cpp_compiler: cl
          - os: macos-13
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-14
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-20.04
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-2019
            c_compiler: gcc
          - os: windows-2019
            c_compiler: clang
          - os: macos-13
            c_compiler: cl
          - os: macos-13
            c_compiler: gcc
          - os: macos-14
            c_compiler: cl
          - os: macos-14
            c_compiler: gcc
          - os: ubuntu-20.04
            c_compiler: cl
          - os: ubuntu-20.04
            c_compiler: clang

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        CURRENT_VERSION=$(python -m ProjectVersion GET_VERSION)
        echo "release-version=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"
        echo "build-output-dir=${{ github.workspace }}${{ env.path-separator }}build" >> "$GITHUB_OUTPUT"
        echo "binary-output-dir=${{ github.workspace }}${{ env.path-separator }}bin${{ env.path-separator }}${{ (startsWith(matrix.os, 'ubuntu') && 'linux') || (startsWith(matrix.os, 'windows') && 'windows') || (startsWith(matrix.os, 'macos') && 'macos') || '' }}_${{ (startsWith(matrix.os, 'macos-14') && 'arm64') || 'x86_64' }}${{ env.path-separator }}${{ matrix.build_type }}" >> "$GITHUB_OUTPUT"
        echo "archive-name=libsokketter-$CURRENT_VERSION-${{ matrix.os }}-${{ (startsWith(matrix.os, 'macos-14') && 'arm64') || 'x86-64' }}" >> "$GITHUB_OUTPUT"
        echo "sokketter-cli-name=sokketter-cli-$CURRENT_VERSION-${{ matrix.os }}-${{ (startsWith(matrix.os, 'macos-14') && 'arm64') || 'x86-64' }}" >> "$GITHUB_OUTPUT"
        echo "sokketter-ui-name=sokketter-ui-$CURRENT_VERSION-${{ matrix.os }}-${{ (startsWith(matrix.os, 'macos-14') && 'arm64') || 'x86-64' }}" >> "$GITHUB_OUTPUT"

    - name: Install dependencies (Ubuntu-only)
      if: ${{ startsWith(matrix.os, 'ubuntu') }}
      run: |
        sudo apt update
        sudo apt install libudev-dev ninja-build wget
        wget -c https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage 
        chmod +x linuxdeployqt-x86_64.AppImage

    - name: Install Qt6 dependencies
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.*'

    - name: Configure CMake for static libraries
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DIS_COMPILING_STATIC=true -DIS_COMPILING_SHARED=false -DCMAKE_PREFIX_PATH=$Qt6_DIR
      if: matrix.library_type == 'static'

    - name: Configure CMake for shared libraries
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DIS_COMPILING_STATIC=false -DIS_COMPILING_SHARED=true -DCMAKE_PREFIX_PATH=$Qt6_DIR
      if: matrix.library_type == 'shared'

    - name: Build binaries
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      # This action has bug with wildcards under Windows OS, thus ignore it.
    - name: Check binaries (non-Windows)
      uses: andstor/file-existence-action@v3
      if: ${{ !startsWith(matrix.os, 'windows') }}
      with:
        files: "${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}include${{ env.path-separator }}*, ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}libs${{ env.path-separator }}*, ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}bin${{ env.path-separator }}*"
        ignore_case: true
        fail: true

    - name: Deploy with linuxdeployqt (Ubuntu-only)
      if: ${{ startsWith(matrix.os, 'ubuntu') }}
      run: |
        cd ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}bin
        mkdir -p ${{ steps.strings.outputs.sokketter-ui-name }}/usr/bin
        cp sokketter-ui ${{ steps.strings.outputs.sokketter-ui-name }}/usr/bin/
        cp ${{ github.workspace }}${{ env.path-separator }}sokketter-ui${{ env.path-separator }}resources${{ env.path-separator }}sokketter-ui.desktop ${{ steps.strings.outputs.sokketter-ui-name }}/
        cp sokketter-ui-icon.png ${{ steps.strings.outputs.sokketter-ui-name }}/
        sed -i '/^Version=/c\Version=${{ steps.strings.outputs.release-version }}' ${{ steps.strings.outputs.sokketter-ui-name }}/sokketter-ui.desktop
        sed -i '/^X-AppImage-Version=/c\X-AppImage-Version=${{ steps.strings.outputs.release-version }}' ${{ steps.strings.outputs.sokketter-ui-name }}/sokketter-ui.desktop
        ./linuxdeployqt-x86_64.AppImage ${{ steps.strings.outputs.sokketter-ui-name }}/usr/bin/sokketter-ui -appimage \
          -executable=${{ steps.strings.outputs.sokketter-ui-name }}/usr/bin/sokketter-ui \
          -desktop-file=${{ steps.strings.outputs.sokketter-ui-name }}/sokketter-ui.desktop \
          -icon-file=${{ steps.strings.outputs.sokketter-ui-name }}/sokketter-ui-icon.png \
          -qmlimport=/usr/lib/qt6/qml \
          -verbose=2

    - name: Deploy with macdeployqt (MacOS-only)
      if: ${{ startsWith(matrix.os, 'macos') }}
      run: |
        cd ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}bin
        mv sokketter-ui.app ${{ steps.strings.outputs.sokketter-ui-name }}.app
        APP_PATH=$(find . -name "*.app" -type d | head -n 1)
        APP_NAME=$(find . -name "*.app" -type d | head -n 1 | xargs basename)
        echo "App path found: $APP_PATH"
        echo "App name found: $APP_NAME"
        macdeployqt "$APP_PATH"
        zip -r sokketter-ui.zip "${APP_NAME}"

    - name: Rename sokketter-cli (Windows-only)
      if: ${{ startsWith(matrix.os, 'windows') }}
      run: mv ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}bin${{ env.path-separator }}sokketter-cli.exe ${{ github.workspace }}${{ env.path-separator }}${{ steps.strings.outputs.sokketter-cli-name }}.exe

    - name: Rename sokketter-cli (non-Windows)
      if: ${{ !startsWith(matrix.os, 'windows') }}
      run: mv ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}bin${{ env.path-separator }}sokketter-cli ${{ github.workspace }}${{ env.path-separator }}${{ steps.strings.outputs.sokketter-cli-name }}

    - name: Rename sokketter-ui (Ubuntu-only)
      if: ${{ startsWith(matrix.os, 'ubuntu') }}
      run: mv ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}bin${{ env.path-separator }}sokketter-ui.AppImage ${{ github.workspace }}${{ env.path-separator }}${{ steps.strings.outputs.sokketter-ui-name }}.AppImage

    - name: Rename sokketter-ui (MacOS-only)
      if: ${{ startsWith(matrix.os, 'macos') }}
      run: mv ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}bin${{ env.path-separator }}sokketter-ui.zip ${{ github.workspace }}${{ env.path-separator }}${{ steps.strings.outputs.sokketter-ui-name }}.zip

    - name: Upload libsokketter
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.strings.outputs.archive-name }}
        path: |
          ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}include
          ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}libs
  
    - name: Upload sokketter-cli (Windows-only)
      if: ${{ startsWith(matrix.os, 'windows') }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.strings.outputs.sokketter-cli-name }}
        path: ${{ steps.strings.outputs.sokketter-cli-name }}.exe
      
    - name: Upload sokketter-cli (non-Windows)
      if: ${{ !startsWith(matrix.os, 'windows') }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.strings.outputs.sokketter-cli-name }}
        path: ${{ steps.strings.outputs.sokketter-cli-name }}
      
    - name: Upload sokketter-ui (Ubuntu-only)
      if: ${{ startsWith(matrix.os, 'ubuntu') }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.strings.outputs.sokketter-ui-name }}
        path: ${{ steps.strings.outputs.sokketter-ui-name }}.AppImage
      
    - name: Upload sokketter-ui (MacOS-only)
      if: ${{ startsWith(matrix.os, 'macos') }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.strings.outputs.sokketter-ui-name }}
        path: ${{ steps.strings.outputs.sokketter-ui-name }}.zip
  