name: CMake (build artifacts)

on: workflow_dispatch

jobs:
  build-only:
    runs-on: ${{ matrix.os }}
    env:
      path-separator: ${{ (startsWith(matrix.os, 'windows') && '\') || '/' }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-13, macos-14]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        library_type: [static]
        include:
          - os: windows-2019
            c_compiler: cl
            cpp_compiler: cl
          - os: macos-13
            c_compiler: clang
            cpp_compiler: clang++
          - os: macos-14
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-20.04
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-2019
            c_compiler: gcc
          - os: windows-2019
            c_compiler: clang
          - os: macos-13
            c_compiler: cl
          - os: macos-13
            c_compiler: gcc
          - os: macos-14
            c_compiler: cl
          - os: macos-14
            c_compiler: gcc
          - os: ubuntu-20.04
            c_compiler: cl
          - os: ubuntu-20.04
            c_compiler: clang

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        CURRENT_VERSION=$(python -m ProjectVersion GET_VERSION)
        echo "build-output-dir=${{ github.workspace }}${{ env.path-separator }}build" >> "$GITHUB_OUTPUT"
        echo "binary-output-dir=${{ github.workspace }}${{ env.path-separator }}bin${{ env.path-separator }}${{ (startsWith(matrix.os, 'ubuntu') && 'linux') || (startsWith(matrix.os, 'windows') && 'windows') || (startsWith(matrix.os, 'macos') && 'macos') || '' }}_${{ (startsWith(matrix.os, 'macos-14') && 'arm64') || 'x86_64' }}${{ env.path-separator }}${{ matrix.build_type }}" >> "$GITHUB_OUTPUT"
        echo "archive-name=libsokketter-$CURRENT_VERSION-${{ matrix.os }}-${{ (startsWith(matrix.os, 'macos-14') && 'arm64') || 'x86-64' }}.zip" >> "$GITHUB_OUTPUT"
        echo "sokketter-cli-name=sokketter-cli-$CURRENT_VERSION-${{ matrix.os }}-${{ (startsWith(matrix.os, 'macos-14') && 'arm64') || 'x86-64' }}${{ (startsWith(matrix.os, 'windows') && '.exe') || '' }}" >> "$GITHUB_OUTPUT"

    - name: Install dependencies (Ubuntu-only)
      run: |
        sudo apt update
        sudo apt install libudev-dev ninja-build
      if: ${{ startsWith(matrix.os, 'ubuntu') }}

    - name: Configure CMake for static libraries
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DIS_COMPILING_STATIC=true -DIS_COMPILING_SHARED=false 
      if: matrix.library_type == 'static'

    - name: Configure CMake for shared libraries
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DIS_COMPILING_STATIC=false -DIS_COMPILING_SHARED=true 
      if: matrix.library_type == 'shared'

    - name: Build binaries
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      # This action has bug with wildcards under Windows OS, thus ignore it.
    - name: Check binaries (non-Windows)
      uses: andstor/file-existence-action@v3
      if: ${{ !startsWith(matrix.os, 'windows') }}
      with:
        files: "${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}includes${{ env.path-separator }}*, ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}libs${{ env.path-separator }}*, ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}bin${{ env.path-separator }}*"
        ignore_case: true
        fail: true

    - name: Archive built binaries (Windows-only)
      if: ${{ startsWith(matrix.os, 'windows') }}
      run: Compress-Archive -Path ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}include ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}libs -Destination ${{ steps.strings.outputs.archive-name }} -Update
  
    - name: Archive built binaries (non-Windows)
      if: ${{ !startsWith(matrix.os, 'windows') }}
      run: cd ${{ steps.strings.outputs.binary-output-dir }} && zip -r ${{ github.workspace }}${{ env.path-separator }}${{ steps.strings.outputs.archive-name }} ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}include ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}libs
  
    - name: Rename sokketter-cli (Windows-only)
      if: ${{ startsWith(matrix.os, 'windows') }}
      run: mv ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}bin${{ env.path-separator }}sokketter-cli.exe ${{ github.workspace }}${{ env.path-separator }}${{ steps.strings.outputs.sokketter-cli-name }} 

    - name: Rename sokketter-cli (non-Windows)
      if: ${{ !startsWith(matrix.os, 'windows') }}
      run: mv ${{ steps.strings.outputs.binary-output-dir }}${{ env.path-separator }}bin${{ env.path-separator }}sokketter-cli ${{ github.workspace }}${{ env.path-separator }}${{ steps.strings.outputs.sokketter-cli-name }}

    - name: Upload libsokketter
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.strings.outputs.archive-name }}
        path: ${{ steps.strings.outputs.archive-name }}
  
    - name: Upload sokketter-cli
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.strings.outputs.sokketter-cli-name }}
        path: ${{ steps.strings.outputs.sokketter-cli-name }}
  