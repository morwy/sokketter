name: CMake (release)

on: 
  workflow_dispatch:
    inputs:
        version_part:
          type: choice
          required: true
          description: Increment version
          options: 
          - NONE
          - MAJOR
          - MINOR
          - MICRO
          - NANO

jobs:
  increment-version:
    runs-on: ubuntu-22.04
    permissions:
        contents: write
    outputs:
      NEW_TAG_NAME: ${{ steps.version.outputs.NEW_TAG_NAME }}
      RELEASE_ENTRY_TEXT: ${{ steps.git-cliff-release-entry.outputs.content }}
      BRANCH_NAME: ${{ steps.read_branch.outputs.BRANCH_NAME }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: "recursive"

    - name: Read branch name
      id: read_branch
      shell: bash
      run: echo "BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
      
    - name: Increase package version
      id: version
      run: |
        python -m ProjectVersion INCREMENT_VERSION ${{ inputs.version_part }}
        NEW_VERSION=$(python -m ProjectVersion GET_VERSION)
        echo "NEW_TAG_NAME=$NEW_VERSION" >> $GITHUB_OUTPUT
      
    - name: Commit update version file
      if: ${{ inputs.version_part != 'NONE' }}
      id: commit-version-file
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        FILE_TO_COMMIT: ProjectVersion.cmake
        DESTINATION_BRANCH: ${{ steps.read_branch.outputs.BRANCH_NAME }}
        MESSAGE: "chore(release): prepare for upcoming release (ProjectVersion.cmake)"
      run: |
        export SHA=$( git rev-parse $DESTINATION_BRANCH:$FILE_TO_COMMIT )
        export CONTENT=$( base64 -i $FILE_TO_COMMIT )
        gh api --method PUT /repos/:owner/:repo/contents/$FILE_TO_COMMIT \
          --field message="$MESSAGE" \
          --field content="$CONTENT" \
          --field encoding="base64" \
          --field branch="$DESTINATION_BRANCH" \
          --field sha="$SHA"

    - name: Generate a changelog
      uses: orhun/git-cliff-action@v4
      id: git-cliff-release-entry
      with:
        config: cliff.toml
        args: --verbose --strip all --tag v${{ steps.version.outputs.NEW_TAG_NAME }} --unreleased
      env:
        OUTPUT: CHANGES.md

    - name: Get changelog since last release
      uses: orhun/git-cliff-action@v4
      id: git-cliff-file
      with:
        config: cliff.toml
        args: --verbose --tag v${{ steps.version.outputs.NEW_TAG_NAME }}
      env:
        OUTPUT: CHANGELOG.md
  
    - name: Commit CHANGELOG.md
      id: change-log-commit
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        FILE_TO_COMMIT: CHANGELOG.md
        DESTINATION_BRANCH: ${{ steps.read_branch.outputs.BRANCH_NAME }}
        MESSAGE: "chore(release): prepare for upcoming release (CHANGELOG.md)"
      run: |
        export SHA=$( git rev-parse $DESTINATION_BRANCH:$FILE_TO_COMMIT )
        export CONTENT=$( base64 -i $FILE_TO_COMMIT )
        gh api --method PUT /repos/:owner/:repo/contents/$FILE_TO_COMMIT \
          --field message="$MESSAGE" \
          --field content="$CONTENT" \
          --field encoding="base64" \
          --field branch="$DESTINATION_BRANCH" \
          --field sha="$SHA"

  build-binaries:
    runs-on: ${{ matrix.os }}
    permissions:
        contents: write
    needs: increment-version
    env:
      path-separator: ${{ (startsWith(matrix.os, 'windows') && '\') || '/' }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-13, macos-14]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.increment-version.outputs.BRANCH_NAME }}
        fetch-depth: 0
        submodules: "recursive"

    - name: Fetch the latest changes
      run: git pull origin ${{ needs.increment-version.outputs.BRANCH_NAME }}

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        OS_NAME=$(python -m Environment GET_OS_NAME)
        OS_VERSION=$(python -m Environment GET_OS_VERSION)
        OS_ARCHITECTURE=$(python -m Environment GET_ARCHITECTURE)
        CURRENT_VERSION=$(python -m ProjectVersion GET_VERSION)
        echo "results-output-dir=${{ github.workspace }}${{ env.path-separator }}results" >> "$GITHUB_OUTPUT"
        echo "archive-name=libsokketter-$CURRENT_VERSION-$OS_NAME-$OS_VERSION-$OS_ARCHITECTURE" >> "$GITHUB_OUTPUT"
        echo "sokketter-cli-name=sokketter-cli-$CURRENT_VERSION-$OS_NAME-$OS_VERSION-$OS_ARCHITECTURE" >> "$GITHUB_OUTPUT"
        echo "sokketter-ui-name=sokketter-ui-$CURRENT_VERSION-$OS_NAME-$OS_VERSION-$OS_ARCHITECTURE" >> "$GITHUB_OUTPUT"

    - name: Install dependencies (Ubuntu-only)
      if: ${{ startsWith(matrix.os, 'ubuntu') }}
      run: |
        sudo apt update
        sudo apt install libfuse2 libudev-dev ninja-build wget libxcb1 libxcb-cursor0 libxcb-xinerama0 libxcb-xfixes0 libxcb-image0
        wget -c https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
        chmod +x linuxdeployqt-continuous-x86_64.AppImage

    - name: Install Qt6 dependencies
      uses: jurplel/install-qt-action@v3
      with:
        version: '6.5.*'

    - name: Run Python build script
      run: python -m Build

    - name: Upload CLI application
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.strings.outputs.sokketter-cli-name }}
        path: ${{ steps.strings.outputs.results-output-dir }}${{ env.path-separator }}sokketter-cli
        if-no-files-found: error

    - name: Upload UI application
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.strings.outputs.sokketter-ui-name }}
        path: ${{ steps.strings.outputs.results-output-dir }}${{ env.path-separator }}sokketter-ui
        if-no-files-found: error
    
  create-release-entry:
    runs-on: ubuntu-22.04
    permissions:
        contents: write
    needs: [increment-version, build-binaries]

    steps:
    - name: Downloading all built binaries
      uses: actions/download-artifact@v4
      with:
        path: ${{ github.workspace }}
        merge-multiple: true

    - name: List all built binaries
      run: ls -R

    - name: Create release entry
      uses: ncipollo/release-action@v1
      with:
        body: "${{ needs.increment-version.outputs.RELEASE_ENTRY_TEXT }}"
        tag: "v${{ needs.increment-version.outputs.NEW_TAG_NAME }}"
        artifacts: "*"
